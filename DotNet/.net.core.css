/* 			 
--------------------------------------------.net core 与framework的关系

至2002微软公司推出.NET平台已近15年，在互联网快速迭代的浪潮中，许多语言已被淘汰，同时也有更多新的语言涌现，
但.Net 依然坚挺的站在系统开发平台的一线阵营中，并且随着.NET Core 即将到来(2016年6月27日)的正式版，
【势必迎来新一轮春天】-------------你相信吗？

2002年-第一个.NET框架————.NET Framework
		.NET Compact Framework 用于在较小的移动设备（Windows mobile）
    .NET Compact Framework 也含有一套类似.NET Framework 体系（Runtime, Framework,Application Model）
    它是一个复制精简版的 .NET Framework。

在数年间微软乐此不疲的推出了【数个类似 .NET Framework的框架】，以用于在不同的设备和平台上运行。
每个Framework都有类似的体系但又不完全相同的，这样Framework越来越多，
对开发者来说不一样的设备即便功能相同也需要维护多套代码，增加了开发的复杂度。

微软对这些问题的重新思考和改进让.NET Core横空出世。
.NET Core是一个开源的模块化的Framework，不管是开发web或移动设备都在同一个Framework（.NET Core）下运行，
而且 .NET Core也可在不同的操作系统上运行，包括Windows、linux、MacOS，实现了跨平台跨设备。
更棒的是.NET Core 在发布程序时【不用事先安装Framework】而是通过【Nuget下载】，
这样在初次部署时就不用安装一个复杂而庞大Framework，而是按需下载。
这种基于Nuget的【按需加载】铸就了.NET Core 跨平台。
---------------- */

/* .net framework- windows */
/* mono */


/* .Net core 跨平台 */
/* 除了过时的winform asp.net webform不支持 */

/* 			 
--------------------------------------------创建项目 
mkdir $1-创建文件夹

cd $1-打开文件

dotnet new classlib -o $1.Service

dotnet new mvc -o $1.Web

dotnet new sln

dotnet sln $1.sln add $1.Service/$1.Service.csproj

dotnet sln $1.sln add $1.Web/$1.Web.csproj

dotnet add $1.Web/$1.Web.csproj reference $1.Service/$1.Service.csproj

cd $1.Service

dotnet add package Pomelo.EntityFrameworkCore.Mysql

dotnet restore

cd ..

cd $1.Web

dotnet add package Newtonsoft.Json

dotnet restore 

dotnet publish
---------------------------------------*/


/* 
对于.NET开发人员来说，我们已经习惯了VS这个世界上最强大的IDE，
所以对我们来说，项目的创建直接利用安装到VS中相应的项目模板即可。

当.NET Core跨出了Windows的围栏，正式拥抱其他平台，意味着VS已经不再是唯一的IDE。
于此同时，.NETCore充分借鉴了目前非常流行的基于“脚手架（Scaffolding）”的源文件生成方式，
在它的核心命令行“dotnet”也添加了脚手架的命令行开关。
除此之外，.NET Core真正对社区敞开胸怀，我们可以直接利用现有的脚手架工具Yeoman来生成.NET Core项目。
接下来我们就来介绍一下两种生成.NET Core项目的方式。
*/


/*
--------------------------------------------创建项目 
		说白了，就是像ionic,angular,nodejs,android,cordova一样，可以用命令行来生成项目。
		
		1、命令行创建.net core 项目
			记不住命令没关系，帮助查看一下
			
			dotnet --help  
			dotnet --new  
			dotnet new --help
			
		2、命令:
			>f:
			>mkdir netcoredemo
			>cd netcoredemo
			>dotnet new mvc 
		
		3、被创建出来的这个Web应用实际上是一个ASP.NET Core MVC项目，如下图所示，它具有一个完整的目录结构。
		
    4、在执行dotnet new mvc,
       会自动执行“dotnet restore”命令恢复依赖的NuGet包之后，
       我们可以直接执行“dotnet run”启动这个MVC应用。
    
		5、接2中命令
			>dotnet run
*/


/* 
--------------------------------------------发布 
发布.net core :dotnet publish -c Release -o ./Publish

Options:
  -h, --help                            Show help information.
  -o, --output <OUTPUT_DIR>             Output directory in which to place the published artifacts.

  要发布的目标框架。目标框架必须在项目文件中指定。
  -f, --framework <FRAMEWORK>           Target framework to publish for. The target framework has to be specified in the project file.

  为给定的运行时发布项目。在创建自包含部署时使用此选项。默认是发布一个与框架依赖的应用程序。
  -r, --runtime <RUNTIME_IDENTIFIER>    Publish the project for a given runtime. This is used when creating self-contained deployment. 
  										Default is to publish a framework-dependent app.
  
  用于构建项目的配置。大多数项目的默认值是“调试”。
  -c, --configuration <CONFIGURATION>   Configuration to use for building the project.  Default for most projects is  "Debug".
  --version-suffix <VERSION_SUFFIX>     Defines the value for the $(VersionSuffix) property in the project.
  --manifest <manifest.xml>             The path to a target manifest file that contains the list of packages to be excluded from the publish step.
  --self-contained                      Publish the .NET Core runtime with your application so the runtime doesn't need to be installed on the target machine. Defaults to 'true' if a runtime identifier is specified.
  --no-restore                          Does not do an implicit restore when executing the command.
  -v, --verbosity                       Set the verbosity level of the command. Allowed values are q[uiet], m[inimal], n[ormal], d[etailed], and diag[nostic].
  --no-dependencies                     Set this flag to ignore project to project references and only restore the root project.
  --force                               Set this flag to force all dependencies to be resolved even if the last restore was successful. This is equivalent to deleting project.assets.json.
 */


/* dotnet publish -r 1.0.0 -o ./rpublish
Microsoft (R) Build Engine version 15.5.180.51428 for .NET Core
Copyright (C) Microsoft Corporation. All rights reserved.

  Restoring packages for /home/randy/vscode/github/.net-core-mvc-vscode-debug-ubuntu/firstapp.csproj...
  Restore completed in 50.82 ms for /home/randy/vscode/github/.net-core-mvc-vscode-debug-ubuntu/firstapp.csproj.
  Restore completed in 647.76 ms for /home/randy/vscode/github/.net-core-mvc-vscode-debug-ubuntu/firstapp.csproj.
/usr/share/dotnet/sdk/NuGetFallbackFolder/microsoft.netcore.app/2.0.0/build/netcoreapp2.0/Microsoft.NETCore.App.targets(19,5): error : Project is targeting runtime '1.0.0' but did not resolve any runtime-specific packages for the 'Microsoft.NETCore.App' package.  This runtime may not be supported by .NET Core. [/home/randy/vscode/github/.net-core-mvc-vscode-debug-ubuntu/firstapp.csproj]
 */


/* Nuget Package Manager */


/* 
---------------------Nuget在vscode上的使用

一个vsc扩展插件,使用vsc的命令面板可以让你方便增加或者删除.NET Core 1.1版本
 以上的包的引用到你的项目中.csproj 或者 .fsproj文件中 
 
 快捷键F1 调用vscode的命令面板
 Nuget  add  or  remove
 */


/* ****************************************************************
**************************************************************** */


/* 建立.net core 解决方案  使用vscode和.net core dotnet命令行 */


/*
------------------完整命令行建立.net core项目

1.建立.net core mvc项目  

mkdir randy-net-core-sln
cd randy-net-core-sln
dotnet new mvc -o Web 

  2.建立BLL类库
dotnet new classlib -o BLL

  3.建立DAL类库
dotnet new classlib -o DAL

  4.建立IDAL类库
dotnet new classlib -o IDAL

  5.建立MODEL类库
dotnet new classlib -o MODEL

  6.建立解决方案
dotnet new sln
  注意 以上,都是在执行了cd randy-net-core-sln目录后,执行的命令


  7.把上面所有的项目加入解决方案
dotnet sln randy-net-core-sln.sln add BLL/BLL.csproj

dotnet sln randy-net-core-sln.sln add DAL/DAL.csproj

dotnet sln randy-net-core-sln.sln add IDAL/IDAL.csproj

dotnet sln randy-net-core-sln.sln add MODEL/MODEL.csproj

dotnet sln randy-net-core-sln.sln add Web/Web.csproj

   8.web project中引入其余classlib project

dotnet add Web/Web.csproj reference BLL/BLL.csproj

dotnet add Web/Web.csproj reference MODEL/MODEL.csproj

   9.通用引入package(eg:引入Newtonsoft.Json)

cd Web
dotnet add package Newtonsoft.Json

   10.大多数时候我们并不记得package name,所以使用上面的nuget package manager

   11.当执行完9-10步以后,我就在想,sln文件有什么用呢,web project已经引入了其余project,sln好像没什么用,
   看sln的资料,感觉就是为之前visual studio 2017 ide服务的,喔,突然想起了以前开发时,双击sln文件,就直接
   用vs打开了整个解决方案,所以这里我姑且猜测,我们在ubuntu或者其他linux发行版开发时,我们是不需要建立解决
   方案.

   12.补充发布命令,cd Web目录下,dotnet publish -o ../Publish

      使用cli命令发布项目，这时可以不用指定运行时标识，直接发布，如果项目不是运行在服务器（Windows或Linux）上的。

      dotnet publish -c Release -o ../Publish
*/


/* dotnet publish --framework netcoreapp2.0 --output "E:\Publish" --configuration Release  */


/* https://docs.microsoft.com/zh-cn/aspnet/core/fundamentals/startup
*/


/* 
【基础知识中】
1.应用程序启动(遗漏 启动筛选器) */


/* 
异步编程是asp.net core 和ef core的默认模式，

web服务器的available线程数量是有限的，

并且在高负载情况下,所有的available线程可能都在使用，

这种情况下,服务器是无法处理请求的,除非线程被释放，

在同步代码中,多个线程可能启用,但是他们实际上是什么都没用做,

因为他们可能正在等待I/O完成，

而在异步代码中,当一个进程在等待I/O完成时,对于服务器来讲,它的线程

是被释放的,而去处理其他请求.

所以,异步代码的使用,使服务器资源能够更加有效的使用,去接收更多流量的请求

而不会延迟.

运行时,异步代码引入,会有少量的开销,

低流量的情况下,这种引入对性能的影响可以忽略不计的,

高流量的情况下,对性能的影响就是想当大的. 

*/


/* public async Task OnGetAsync()
{
    Student = await _context.Students.ToListAsync();
}

    async关键字告知编译器对：
        生成方法体的部分的回调。
        自动创建任务返回的对象。 
        
        【有关详细信息，请参阅任务返回类型】。

    隐式返回类型Task表示正在进行的工作。

    await关键字会导致编译器拆分为两个部分的方法。 
      第一部分结尾以异步方式启动该操作。 
      第二部分被放入操作完成时调用的回调方法。

    ToListAsync是的异步版本ToList扩展方法。 */


/* 编写异步代码,使用EF CORE时需要考虑的事项
1.以异步的方式执行查询或者命令到数据库的语句

  这包括 ToListAsync， 
        SingleOrDefaultAsync， 
        FirstOrDefaultAsync，和
        SaveChangesAsync。

  不包括只是对IQueryable的更改的语句,
  eg:var students = context.Students.Where(s => s.LastName == "Davolio")

2.EF CORE上下文不是线程安全的,所以不要尝试并行的多个操作.

3.如果要充分利用异步代码的性能优势,验证库包(如分页),这些库包在调用EF CORE的方法中,
  
那些【发送查询】到数据库的方法是否使用了异步代码. */


/* // "MysqlDbConnectionString":"Server=localhost;Database=School;user=root;Password=randy1992;pooling=true;CharSet=utf8;port=3306;sslmode=none", */