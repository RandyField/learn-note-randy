/*  
    选择器
    select
    selectAll
    */


/* 数据绑定(赋值，dom未改变)
    datum()
    data() */


/* d3对象.data(数组) */


/* d3对象.datum(字符串) */


/* 插入元素
    之后d3对象.append() 
    之前d3对象.insert()
*/


/* 删除元素
d3对象..remove() */


/* HTML 5 提供两种强有力的“画布”：SVG 和 Canvas。 */


/* SVG，指可缩放矢量图形（Scalable Vector Graphics），是用于描述二维矢量图形的一种图形格式，
是由万维网联盟制定的开放标准。SVG 使用 XML 格式来定义图形，除了 IE8 之前的版本外，
绝大部分浏览器都支持 SVG，可将 SVG 文本直接嵌入 HTML 中显示。

SVG 有如下特点：

    SVG 绘制的是矢量图，因此对图像进行放大不会失真。
    基于 XML，可以为每个元素添加 JavaScript 事件处理器。
    每个图形均视为对象，更改对象的属性，图形也会改变。
    不适合游戏应用。 */


/* Canvas 是通过 JavaScript 来绘制 2D 图形，是 HTML 5 中新增的元素。

Canvas 有如下特点：

    绘制的是位图，图像放大后会失真。
    不支持事件处理器。
    能够以 .png 或 .jpg 格式保存图像
    适合游戏应用 */


/* D3 虽然没有明文规定一定要在 SVG 中绘图，但是 D3 提供了众多的 SVG 图形的生成器，
它们都是只支持 SVG 的。因此，建议使用 SVG 画布。 */

/* 比例尺   */

/* 线性比例尺 */
/* var dataset = [1.2, 2.3, 0.9, 1.5, 3.3];
将 dataset 中最小的值，映射成 0；将最大的值，映射成 300。
var min = d3.min(dataset); //获取最小值
var max = d3.max(dataset); //获取最大值

var linear = d3.scale.linear() //返回一个线性比例尺-返回值，且是一个函数 alter(linear) ,function
        .domain([min, max]) //定义域
        .range([0, 300]); //值域

linear(0.9);    //返回 0
linear(2.3);    //返回 175
linear(3.3);    //返回 300 */


/* 序数比例尺 */
/* 
定义域和值域不一定是连续的。
var index = [0, 1, 2, 3, 4];
var color = ["red", "blue", "green", "yellow", "black"];
0 对应颜色 red，1 对应 blue，依次类推。
，这些值都是离散的，线性比例尺不适合，需要用到序数比例尺。
var ordinal=d3.scale.ordinal()
                    .domain(index)
                    .range(color);

                    ordinal(0); //返回 red
                    ordinal(2); //返回 green
                    ordinal(4); //返回 black
 */

/* 坐标轴 */
/* 在 SVG 画布的预定义元素里，有六种基本图形：

    矩形 <rect>
    圆形 <circle>
    椭圆 <ellipse>
    线段 <line>
    折线 <polyline>
    多边形 <polygon>

另外，还有一种比较特殊，也是功能最强的元素：

    路径 <path>

画布中的所有图形，都是由以上七种元素组成。 */

/* 
rect 里没有矩形的属性。矩形的属性，常用的有四个：

    x：矩形左上角的 x 坐标
    y：矩形左上角的 y 坐标
    width：矩形的宽度
    height：矩形的高度
 */

/* 动态效果

    transition() 过渡
        .attr("fill","red")         //初始颜色为红色
        .transition()               //启动过渡
        .attr("fill","steelblue")   //终止颜色为铁蓝色

    duration() 过渡的持续时间,毫秒

    ease() 过渡的方式

            linear：普通的线性变化
            circle：慢慢地到达变换的最终状态
            elastic：带有弹跳的到达最终状态
            bounce：在最终状态处弹跳几次

    delay() 延迟时间延迟的时间，表示一定时间后才开始转变，单位同样为毫秒。
            此函数可以对整体指定延迟，也可以对个别指定延迟。
            .transition()
            .duration(1000)
            .delay(500)
                如此，图形整体在延迟 500 毫秒后发生变化，变化的时长为 1000 毫秒。因此，过渡的总时长为1500毫秒。

*/




/* Update、Enter、Exit */

/* 
update 部分的处理办法一般是：更新属性值
enter 部分的处理办法一般是：添加元素后，赋予属性值
exit 部分的处理办法一般是：删除元素（remove）
 */

 /* 用户用于交互的工具一般有三种：鼠标、键盘、触屏。 */


 /* click：鼠标单击某元素时，相当于 mousedown 和 mouseup 组合在一起。
 mouseover：光标放在某元素上。
 mouseout：光标从某元素上移出来时。
 mousemove：鼠标被移动的时候。
 mousedown：鼠标按钮被按下。
 mouseup：鼠标按钮被松开。
 dblclick：鼠标双击。
 */

/* 
 键盘常用的事件有三个：

    keydown：当用户按下任意键时触发，按住不放会重复触发此事件。该事件不会区分字母的大小写，例如“A”和“a”被视为一致。
    keypress：当用户按下字符键（大小写字母、数字、加号、等号、回车等）时触发，按住不放会重复触发此事件。该事件区分字母的大小写。
    keyup：当用户释放键时触发，不区分字母的大小写。 */

/* 触屏常用的事件有三个：

    touchstart：当触摸点被放在触摸屏上时。
    touchmove：当触摸点在触摸屏上移动时。
    touchend：当触摸点从触摸屏上拿开时。 */

/* // .on事件不能放在.transition代码段后面，否则运行到.on会报错。将
    .on事件放在.transition前面。 */



    /* 用过的highchart 大部分可视化工具
    数据-----绘图函数-----图表(这种着重点在数据,数据的呈现形势也是提前知道的,所以直接选中绘图函数即可,) */

    

    /* 对比D3.js
    数据-------布局-------获得绘图所需数据-------在画布上添加相应的图形--------图标  */


/* 
    选择 D3：如果希望开发脑海中任意想象到的图表。
    选择 Highcharts、Echarts 等：如果希望开发几种固定种类的、十分大众化的图表。 */



    /* 2. 如何理解布局

从上面的图可以看到，布局的作用是：将不适合用于绘图的数据转换成了适合用于绘图的数据。

因此，为了便于初学者理解，本站的教程叫布局的作用解释成：数据转换。 */

/* 
D3 总共提供了 12 个布局：
            饼状图（Pie）、
            力导向图（Force）、
            弦图（Chord）、
            树状图（Tree）、
            集群图（Cluster）、
            捆图（Bundle）、
            打包图（Pack）、
            直方图（Histogram）、
            分区图（Partition）、
            堆栈图（Stack）、
            矩阵树图（Treemap）、
            层级图（Hierarchy）。

12 个布局中，层级图（Hierarchy）不能直接使用。
            集群图、打包图、分区图、树状图、矩阵树图是由层级图扩展来的。
        如此一来，能够使用的布局是 11 个（有 5 个是由层级图扩展而来）。
        这些布局的作用都是将某种数据转换成另一种数据，而转换后的数据是利于可视化的。 */


/* 
当窗口大小变化的时候，令SVG的大小也随之更新，当然，其他图形也要重新计算。写在 window.onresize 里即可。
        var w = window,
        d = document,
        e = d.documentElement,
        x = w.innerWidth || e.clientWidth || g.clientWidth,
        y = w.innerHeight|| e.clientHeight|| g.clientHeight;
    
    var svg = d3.select("body")
                .append("svg")
                .attr("width", x)
                .attr("height", y);
    
    function updateWindow(){
        x = w.innerWidth || e.clientWidth || g.clientWidth;
        y = w.innerHeight|| e.clientHeight|| g.clientHeight;
    
        console.log(x);
        console.log(y);
    
        svg.attr("width", x)
            .attr("height", y);
    }
    window.onresize = updateWindow; */


    /* <svg>
        <g fill="" d=""></g>
        <text transform="" text-anchor=""></text>
    </svg> */