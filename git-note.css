/* #注册用户名 邮箱 */


/* $ git config --global user.name "Your Name"
$ git config --global user.email "email@example.com" */


/* $ git config --global user.name "RandyField"
$ git config --global user.email "287572291@qq.com" */


/* #git初始化 */


/* $ git init */


/* #至暂存区 */


/* $ git add readme.txt */


/* 暂存区至工作区 */


/* $ git commit -m "wrote a readme file" */


/* 
单解释一下git commit命令，
-m后面输入的是本次提交的说明，可以输入任意内容，当然最好是有意义的，
这样你就能从历史记录里方便地找到改动记录。

嫌麻烦不想输入-m "xxx"行不行？确实有办法可以这么干，但是强烈不建议你这么干，因为输入说明对自己对别人阅读都很重要。
实在不想输入说明的童鞋请自行Google，我不告诉你这个参数。

git commit命令执行成功后会告诉你，1个文件被改动（我们新添加的readme.txt文件），
插入了两行内容（readme.txt有两行内容）。 */


/* #git日志 */


/* $ git log */


/* 
如果嫌输出信息太多，看得眼花缭乱的，可以试试加上--pretty=oneline参数：

$ git log --pretty=oneline */


/* log中有很长一段字符串，是一个SHA1计算出来的一个非常大的数字，用十六进制表示 */


/* #git回退 */


/* 
我们要把当前版本“append GPL”回退到上一个版本“add distributed”，就可以使用git reset命令：
$ git reset --hard HEAD^
HEAD is now at ea34578 add distributed */


/* $ git reset --hard 3628164
HEAD is now at 3628164 append GPL */


/* 版本号没必要写全，前几位就可以了，Git会自动去找。
当然也不能只写前一两位，因为Git可能会找到多个版本号，
就无法确定是哪一个了。 */


/* #git回退到指定版本 */


/* 在Git中，总是有后悔药可以吃的。当你用$ git reset --hard HEAD^回退到add distributed版本时，
再想恢复到append GPL，
就必须找到append GPL的commit id。
Git提供了一个命令git reflog用来记录你的每一次命令：


$ git reflog
ea34578 HEAD@{0}: reset: moving to HEAD^
3628164 HEAD@{1}: commit: append GPL
ea34578 HEAD@{2}: commit: add distributed
cb926e7 HEAD@{3}: commit (initial): wrote a readme file */


/* 先用git status查看一下状态： */


/* git add命令实际上就是把要提交的所有修改放到暂存区（Stage），
然后，执行git commit就可以一次性把暂存区的所有修改提交到分支。 */


/* 一旦提交后，如果你又没有对工作区做任何修改，那么工作区就是“干净”的：

$ git status
# On branch master
nothing to commit (working directory clean) */


/* #让这个文件回到最近一次git commit或git add时的状态 */


/* 
你可以发现，Git会告诉你，git checkout -- file可以丢弃工作区的修改：

$ git checkout -- readme.txt

命令git checkout -- readme.txt意思就是，把readme.txt文件在工作区的修改全部撤销，这里有两种情况：

一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；

一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。

总之，就是让这个文件回到最近一次git commit或git add时的状态。 */


/* git checkout -- file命令中的--很重要，没有--，
就变成了“切换到另一个分支”的命令，我们在后面的分支管理中会再次遇到git checkout命令。 */


/* Git同样告诉我们，用命令git reset HEAD file可以把暂存区的修改撤销掉（unstage），重新放回工作区：

$ git reset HEAD readme.txt
Unstaged changes after reset:
M       readme.txt */


/* #git删除文件 */


/* 
$ git rm test.txt
rm 'test.txt'
$ git commit -m "remove test.txt"
[master d17efd8] remove test.txt
 1 file changed, 1 deletion(-)
 delete mode 100644 test.txt */


/* #git远程与github建立连接 */


/* 
 现在，我们根据GitHub的提示，在本地的learngit仓库下运行命令：

$ git remote add origin https://github.com/RandyField/learn-note-randy.git 

$ git remote add origin git@github.com:RandyField/learn-note-randy.git \

*/


/* git提交至github */


/* $ git push -u origin master */


/* 
现在，远程库已经准备好了，下一步是用命令git clone克隆一个本地库：

$ git clone git@github.com:michaelliao/gitskills.git
Cloning into 'gitskills'...
remote: Counting objects: 3, done.
remote: Total 3 (delta 0), reused 0 (delta 0)
Receiving objects: 100% (3/3), done.

$ cd gitskills
$ ls
README.md */


/*  $ git checkout -b dev 

    git checkout命令加上-b参数表示创建并切换，相当于以下两条命令：

    $ git branch dev
    $ git checkout dev
    Switched to branch 'dev'

*/


/* 切换分支 */


/* $ git checkout master */


/* 我们把dev分支的工作成果合并到master分支上：
$ git merge dev */


/* 删除分支 */


/* $ git branch -d dev
Deleted branch dev (was fec145a). */