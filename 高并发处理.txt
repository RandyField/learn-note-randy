api GetSingleBarrage1    参数计算机名  name
1、获取该站 审核通过 且未播放的弹幕
			-审核通过，还未播放，城市名，按storetime 排序
			-更改第一个已播放标识，更改播放时间TransferTime
			-保存
			
2、 1中未找到，则获取该站最早播放的弹幕
			-审核通过，已经播放，指定的城市，按播放时间排序 TransferTime
			-更改播放时间 播放次数+1，TransferCount
			-保存

3、 2中未找到，则获取所有站还未播放的弹幕
			-审核通过，还未播放，按storetime排序
			-更改已播放标识-注释，播放时间，播放次数+1，TransferCount
			-保存
			
4、 3中未找到，则获取所有站最早播放过的弹幕
			-审核通过，已经播放，播放时间升序排序
			-更改播放时间，播放次数+1，TransferCount
			-保存
			
			
			
 1. 事务锁，锁行，性能会有一定程度衰减，但是非常可靠   2. 使用消息队列异步处理，对性能没有影响，可靠性相对较弱，且数据无法保证时效
 
			缓存全支持持久化了
			
			消息队列   走RPC也不错
			
			读写缓存的成本比数据库小太多了
			
			消息队列本来就是单线程消费的 
			
			难道你还要自己实现ACK机制嘛
			
			我有另一个缓存做存储   扔进去前同时扔缓存   业务成功后把那条清了
另外有一个服务在监控这个鬼东西

说起来就跟http为什么是3次握手有关系了


你告诉我你起床了   我要告诉你我知道你告诉我了   你还要告诉我你知道了我知道你起床了   无限循环啊

一个正常进程  一个守护线程   再开一个守护线程再去守护那个守护线程   那还得再开一个线程去守护刚那个线程


在程序入口处，一个账号只允许接受1个请求，其他请求过滤。不仅解决了同一个账号，发送N个请求的问题，还保证了后续的逻辑流程的安全。
实现方案，可以通过Redis这种内存缓存服务，写入一个标志位（只允许1个请求写成功，结合watch的乐观锁的特性），成功写入的则可以继续参加。



她说中国的各个公司的HR对她繁多的实习经历不是很满意，说她是个花心大萝卜，她问我怎么看？我说，别听HR的，你只有多经历了不同的公司，才会有比较，才会知道哪更适合自己，而且，人生就是为了经历，趁年轻有资本，应该多经历不同的。